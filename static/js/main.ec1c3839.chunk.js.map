{"version":3,"sources":["activities/vaporTriangulation.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Triangulation","state","screenWidth","ctx","document","getElementById","getContext","fillStyle","dims","beginPath","rowOffset","colOffset","i","moveTo","lineTo","stroke","j","id","height","style","borderColor","width","color","onClick","this","renderTraingles","bind","React","Component","App","className","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"yNAOqBA,E,2MAEjBC,MAAQ,CACJC,YAAa,M,iFAIb,IACIC,EADIC,SAASC,eAAe,uBACpBC,WAAW,MACvBH,EAAII,UAAY,QAEhB,IAAMC,EAAO,CAAC,GAAI,IAElBL,EAAIM,YAGJ,IAFA,IAAIC,EAAY,EACZC,EAAY,EACPC,EAAI,EAAGA,EAAIJ,EAAK,GAAII,IACzBT,EAAIU,OAAO,EAAG,EAAIH,GAClBP,EAAIW,OAAO,KAAM,EAAIJ,GACrBP,EAAIY,SACJL,GAAa,GAGjB,IAAK,IAAIM,EAAI,EAAGA,EAAIR,EAAK,GAAIQ,IACzBb,EAAIU,OAAO,EAAEF,EAAW,GACxBR,EAAIW,OAAO,EAAEH,EAAW,KACxBR,EAAIY,SACJJ,GAAW,K,4EAef,OACI,6BACI,gEACA,4BAAQM,GAAG,sBAAsBC,OAAO,MACpCC,MAAO,CACHC,YAAa,QACbC,MAAO,OACPC,MAAO,WAGf,kBAAC,IAAD,CACIC,QAASC,KAAKC,gBAAgBC,KAAKF,OADvC,yB,GApD2BG,IAAMC,WCiBlCC,MAnBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,uBACEA,UAAU,WACVC,KAAK,mCACLC,OAAO,SACPC,IAAI,uBAJN,2BAQF,kBAAC,EAAD,SCLcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASpC,SAASC,eAAe,SD0H3C,kBAAmBoC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.ec1c3839.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Tabs, Icon, Carousel, Card, Row, Col, Collapse,\n    Button, Modal, TreeSelect, Divider\n} from 'antd';\n\n\nexport default class Triangulation extends React.Component {\n\n    state = {\n        screenWidth: 1399\n    }\n\n    renderTraingles() {\n        var c = document.getElementById(\"triangulationCanvas\");\n        var ctx = c.getContext(\"2d\");\n        ctx.fillStyle = \"white\"\n        // The X (cols) and Y(rows)\n        const dims = [20, 10];\n\n        ctx.beginPath();\n        var rowOffset = 0;\n        var colOffset = 0\n        for (var i = 0; i < dims[1]; i++) {\n            ctx.moveTo(0, 0 + rowOffset);\n            ctx.lineTo(1399, 0 + rowOffset);\n            ctx.stroke();\n            rowOffset += 20;\n            \n        }\n        for (var j = 0; j < dims[0]; j++) {\n            ctx.moveTo(0+colOffset, 0);\n            ctx.lineTo(0+colOffset, 300);\n            ctx.stroke();\n            colOffset+=40\n        }\n\n\n\n    }\n\n    componentDidMount() {\n        // this.renderTraingles();\n    }\n\n\n    render() {\n\n        const screenWidth = 1399;\n        return (\n            <div>\n                <h1>This is where cool stuff will go</h1>\n                <canvas id=\"triangulationCanvas\" height=\"150\"\n                    style={{\n                        borderColor: 'black',\n                        width: '100%',\n                        color: 'white'\n                    }}\n                ></canvas>\n                <Button\n                    onClick={this.renderTraingles.bind(this)}\n                >Check Back Later</Button>\n\n            </div>\n        )\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Triangulation from './activities/vaporTriangulation'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/ShivBhosale  \"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Shiv's personal website\n        </a>\n      <Triangulation/>\n      </header>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"antd/dist/antd.css\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}