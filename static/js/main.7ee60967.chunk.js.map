{"version":3,"sources":["logo.svg","activities/vaporTriangulation.js","activities/aboutMe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","sleep","ms","Promise","resolve","setTimeout","Triangulation","state","dims","window","screen","width","col_pegs","col_pregs_dest","interm_pegs","screenWidth","availWidth","screenHeight","availHeight","min","max","Math","ceil","floor","random","steps","this","generateGrid","new_col_pegs","setState","obj","p","intermediate_pegs","spl","intermediate_col","delta","console","log","push","renderTraingles","j","col_height","temp_col","prev","i","rand_split","getRandomInt","c","document","getElementById","ctx","getContext","clearRect","height","strokeStyle","fillStyle","beginPath","colStart","colOffset","lower_coord","moveTo","lineTo","stroke","timer","setInterval","transformTriangle","id","style","position","textAlign","backgroundColor","React","Component","AboutMe","class","Paragraph","color","maxWidth","App","className","Title","paddingTop","type","content","href","marginLeft","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ee60967.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport {\n    Tabs, Icon, Carousel, Card, Row, Col, Collapse,\n    Button, Modal, TreeSelect, Divider, Tooltip\n} from 'antd';\nimport { SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from 'constants';\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default class Triangulation extends React.Component {\n\n    state = {\n        dims: window.screen.width > 600 ? [20, 7] : [7, 7],\n        col_pegs: [],\n        col_pregs_dest: [],\n        interm_pegs: [],\n        screenWidth: window.screen.availWidth,\n        screenHeight: window.screen.availHeight > window.screen.availWidth ? window.screen.availHeight / 2 : window.screen.availHeight\n    }\n\n    getRandomInt(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n    }\n\n    async transformTriangle() {\n        const steps = [0.02, 0.06, 0.14, 0.30, 0.70, 0.86, 0.94, 0.98, 1.0]\n        const col_pegs = this.state.col_pegs\n        const new_col_pegs = await this.generateGrid()\n\n        this.setState({\n            col_pregs_dest: new_col_pegs\n        });\n        for (var p in steps) {\n            var intermediate_pegs = [];\n            for (var obj in col_pegs) {\n                var intermediate_col = [];\n                for (var spl in col_pegs[obj]) {\n                    var delta = new_col_pegs[obj][spl] - col_pegs[obj][spl]\n                    console.log(delta)\n                    intermediate_col.push(col_pegs[obj][spl] + (delta * steps[p]))\n                }\n                intermediate_pegs.push(intermediate_col)\n            }\n            this.setState({\n                col_pegs: intermediate_pegs\n            })\n            await this.renderTraingles()\n            await sleep(1)\n        }\n        this.setState({\n            col_pegs: new_col_pegs\n        })\n\n    }\n\n    async generateGrid() {\n        const splits = [30, 50, 40, 15, 20]\n        var col_pegs = [];\n        for (var j = 0; j <= this.state.dims[0]; j++) {\n            var col_height = this.state.screenHeight;\n            var temp_col = []\n            var prev = 0\n            for (var i = 0; i < this.state.dims[1]; i++) {\n                var rand_split = this.getRandomInt(5, 21);\n                temp_col.push(prev + col_height * (rand_split / 100))\n                prev += col_height * (rand_split / 100)\n                col_height = col_height * (1 - (rand_split / 100))\n            }\n            col_pegs.push(temp_col)\n        }\n        return col_pegs\n    }\n\n    async renderTraingles() {\n        var col_pegs = this.state.col_pegs;\n        console.log(col_pegs)\n        var c = document.getElementById(\"triangulationCanvas\");\n        var ctx = c.getContext(\"2d\");\n        ctx.clearRect(0, 0, c.width, c.height);\n        ctx.strokeStyle = \"#559e89\";\n        ctx.fillStyle = \"#FF0000\";\n\n        ctx.beginPath();\n        // ctx.fillRect(0,0, 3, 3);\n        var colStart = 0\n        var colOffset = this.state.screenWidth / this.state.dims[0];\n        colStart = 0;\n        for (var obj in col_pegs) {\n            var lower_coord = 0\n            for (var spl in col_pegs[obj]) {\n                lower_coord = col_pegs[obj][spl]\n                // ctx.fillRect(colStart + colOffset, lower_coord, 3, 3);\n                ctx.moveTo(colStart, lower_coord);\n                ctx.lineTo(colStart, col_pegs[obj][spl - 1]);\n                ctx.stroke();\n                if (obj != 0) {\n                    ctx.moveTo(colStart, lower_coord);\n                    ctx.lineTo(colStart - colOffset, col_pegs[obj - 1][spl]);\n                    ctx.stroke();\n\n                    if (obj % 2 == 0) {\n                        ctx.moveTo(colStart, lower_coord);\n                        ctx.lineTo(colStart - colOffset, col_pegs[obj - 1][spl - 1]);\n                        ctx.stroke();\n                    }\n                    else {\n                        ctx.moveTo(colStart, col_pegs[obj][spl - 1]);\n                        ctx.lineTo(colStart - colOffset, col_pegs[obj - 1][spl]);\n                        ctx.stroke();\n                    }\n\n                }\n            }\n            colStart += colOffset;\n        }\n\n    }\n\n    async componentDidMount() {\n\n        this.setState({\n            col_pegs: await this.generateGrid(),\n            screenWidth: window.screen.availWidth,\n            screenHeight: window.screen.availHeight > window.screen.availWidth ? window.screen.availHeight / 2 : window.screen.availHeight\n        })\n        await this.renderTraingles();\n        this.timer = setInterval(() => this.transformTriangle(), 3000);\n    }\n\n    render() {\n        return (\n            <div>\n                <canvas id=\"triangulationCanvas\"\n                    style={{\n                        position:'fixed',\n                        textAlign: 'none',\n                        backgroundColor: '#282C34'\n                    }}\n                    width={window.screen.availWidth}\n                    height={window.screen.availHeight}\n                ></canvas>\n\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {\n    Tabs, Icon, Carousel, Card, Row, Col, Collapse,\n    Button, Modal, TreeSelect, Divider, Typography\n} from 'antd';\n\nexport default class AboutMe extends React.Component {\n    render() {\n\n        return (\n            <div class='AboutMe' id=\"AboutMe\">\n                <center>\n                    <Typography.Paragraph\n                        style={{\n                            color: 'white' ,\n                            maxWidth:'350px'\n                        }}\n                    >Good at building data intensive software. My tech inventory is a mixed bag of Python, Apache Spark, React, Golang and a couple of ML frameworks. In my free time I read, build software or do math. Check out my projects to know more about my work.</Typography.Paragraph>\n                </center>\n\n            </div>\n        )\n    }\n}","import React from 'react';\nimport animateScrollTo from 'animated-scroll-to';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {\n  Tabs, Icon, Carousel, Card, Row, Col, Collapse,\n  Button, Modal, TreeSelect, Divider, Typography, Popover,\n  BackTop, Tooltip\n} from 'antd';\nimport Triangulation from './activities/vaporTriangulation'\nimport AboutMe from './activities/aboutMe'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BackTop />\n\n      <center>\n        <Typography.Title\n          style={{\n            color: 'white',\n            paddingTop: '7%'\n          }}\n        >SHIV.</Typography.Title>\n        <div>\n          <Popover type=\"primary\" content={<div><center><Icon type=\"lock\" /> Under construction.</center> <br></br>Check out my Twitter <a href=\"https://twitter.com/artstylebot\">AI bot</a> till then.</div>}>\n            <Icon style={{ color: 'white' }} type=\"book\"></Icon><a style={{ marginLeft: '10px' }} href=\"#\">blog</a>\n          </Popover>\n          <Divider type=\"vertical\" />\n          <Icon style={{ color: 'white' }} type=\"github\"></Icon><a style={{ marginLeft: '10px' }} href=\"https://github.com/ShivBhosale\">github</a>\n          <br></br>\n          <br></br>\n          <AboutMe />\n        </div>\n      </center>\n      <Triangulation />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"antd/dist/antd.css\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}